# RUN: llc -O0 -x mir -mcpu=gfx900 -start-after=livedebugvalues -filetype=obj < %s | llvm-dwarfdump - | FileCheck %s

--- |
  target datalayout = "e-p:64:64-p1:64:64-p2:32:32-p3:32:32-p4:64:64-p5:32:32-p6:32:32-i64:64-v16:16-v24:32-v32:32-v48:64-v96:128-v192:256-v256:256-v512:512-v1024:1024-v2048:2048-n32:64-S32-A5-G1-ni:7"
  target triple = "amdgcn-amd-amdhsa"

  define void @kern() #0 !dbg !9 {
    ret void, !dbg !14
  }
  attributes #0 = { convergent mustprogress noinline nounwind optnone "amdgpu-stack-objects" "frame-pointer"="none" "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="gfx900" "target-features"="+16-bit-insts,+ci-insts,+dpp,+flat-address-space,+gfx8-insts,+gfx9-insts,+s-memrealtime,+s-memtime-inst" "uniform-work-group-size"="false" }

  !llvm.dbg.cu = !{!0}
  !llvm.module.flags = !{!2, !3, !4, !5, !6, !7}
  !llvm.ident = !{!8}

  !0 = distinct !DICompileUnit(language: DW_LANG_C_plus_plus_14, file: !1, producer: "clang version 19.0.0", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, splitDebugInlining: false, nameTableKind: None)
  !1 = !DIFile(filename: "t.cpp", directory: "/")
  !2 = !{i32 1, !"amdhsa_code_object_version", i32 500}
  !3 = !{i32 7, !"Dwarf Version", i32 5}
  !4 = !{i32 2, !"Debug Info Version", i32 3}
  !5 = !{i32 1, !"wchar_size", i32 4}
  !6 = !{i32 8, !"PIC Level", i32 2}
  !7 = !{i32 7, !"frame-pointer", i32 2}
  !8 = !{!"clang version 19.0.0"}
  !9 = distinct !DISubprogram(name: "kern", linkageName: "kern", scope: !1, file: !1, line: 1, type: !10, scopeLine: 1, flags: DIFlagPrototyped, spFlags: DISPFlagDefinition, unit: !0, retainedNodes: !12)
  !10 = !DISubroutineType(types: !11)
  !11 = !{}
  !12 = !{!17, !18, !19}
  !13 = !DIBasicType(name: "i64", size: 64, encoding: DW_ATE_signed)
  !14 = !DILocation(line: 1, column: 1, scope: !9)
  !15 = !DILocation(line: 2, column: 1, scope: !9)
  !16 = !DILocation(line: 3, column: 1, scope: !9)
  !17 = !DILocalVariable(name: "no_overlaps", scope: !9, file: !1, line: 1, type: !13)
  !18 = !DILocalVariable(name: "overlaps", scope: !9, file: !1, line: 1, type: !13)
  !19 = !DILocalVariable(name: "bits", scope: !9, file: !1, line: 1, type: !13)
  !20 = distinct !DICompositeType(tag: DW_TAG_structure_type, name: "S", file: !1, line: 1, size: 64, elements: !21)
  !21 = !{!22, !23}
  !22 = !DIBasicType(name: "i32", size: 32, encoding: DW_ATE_signed)
  !23 = !DIDerivedType(tag: DW_TAG_member, name: "a", scope: !20, file: !1, line: 1, baseType: !22, size: 32)
  !24 = !DIDerivedType(tag: DW_TAG_member, name: "b", scope: !20, file: !1, line: 1, baseType: !22, size: 32, offset: 32)
  !25 = !DILocalVariable(name: "struct_var", scope: !9, file: !1, line: 1, type: !20)

...
---
name: kern
body: |
  bb.0:

    ; CHECK: DW_AT_location
    ; CHECK-NEXT: [0x{{[0-9a-z]+}}, 0x{{[0-9a-z]+}}): DW_OP_regx SGPR40, DW_OP_piece 0x4, DW_OP_LLVM_user DW_OP_LLVM_undefined, DW_OP_piece 0x2, DW_OP_regx SGPR42, DW_OP_piece 0x2)
    ; CHECK-NEXT: DW_AT_name ("no_overlaps")
    DBG_VALUE_LIST !17, !DIExpression(DIOpArg(0, i32), DIOpFragment(0, 32)), renamable $sgpr40, debug-location !14
    DBG_VALUE_LIST !17, !DIExpression(DW_OP_LLVM_poisoned, DW_OP_LLVM_fragment, 32, 16), renamable $sgpr41, debug-location !14
    DBG_VALUE_LIST !17, !DIExpression(DIOpArg(0, i32), DIOpFragment(48, 16)), renamable $sgpr42, debug-location !14


    ; CHECK: DW_AT_location
    ; CHECK-NEXT: [0x{{[0-9a-z]+}}, 0x{{[0-9a-z]+}}): DW_OP_piece 0x2, DW_OP_regx VGPR44, DW_OP_piece 0x4, DW_OP_regx VGPR45, DW_OP_piece 0x2
    DBG_VALUE renamable $vgpr43, $noreg, !18, !DIExpression(DW_OP_LLVM_poisoned, DW_OP_LLVM_fragment, 0, 32), debug-location !14
    DBG_VALUE renamable $vgpr44, $noreg, !18, !DIExpression(DIOpArg(0, i32), DIOpFragment(16, 32)), debug-location !14
    DBG_VALUE renamable $vgpr45, $noreg, !18, !DIExpression(DIOpArg(0, i32), DIOpFragment(48, 16)), debug-location !14
    S_NOP 0, debug-location !14

    ; CHECK-NEXT: [0x{{[0-9a-z]+}}, 0x{{[0-9a-z]+}}): DW_OP_regx VGPR46, DW_OP_piece 0x1, DW_OP_piece 0x1, DW_OP_LLVM_user DW_OP_LLVM_undefined, DW_OP_piece 0x2, DW_OP_piece 0x2, DW_OP_regx VGPR45, DW_OP_piece 0x2
    DBG_VALUE renamable $vgpr46, $noreg, !18, !DIExpression(DIOpArg(0, i32), DIOpFragment(0, 8)), debug-location !15
    DBG_VALUE renamable $vgpr47, $noreg, !18, !DIExpression(DW_OP_LLVM_poisoned, DW_OP_LLVM_fragment, 16, 16), debug-location !15
    S_NOP 0, debug-location !15

    ; CHECK-NEXT: [0x{{[0-9a-z]+}}, 0x{{[0-9a-z]+}}): DW_OP_regx VGPR46, DW_OP_piece 0x1, DW_OP_LLVM_user DW_OP_LLVM_undefined, DW_OP_piece 0x7
    ; CHECK-NEXT: DW_AT_name ("overlaps")
    DBG_VALUE renamable $vgpr48, $noreg, !18, !DIExpression(DW_OP_LLVM_poisoned, DW_OP_LLVM_fragment, 8, 56), debug-location !16

    ; CHECK: DW_AT_location
    ; CHECK-NEXT: [0x{{[0-9a-z]+}}, 0x{{[0-9a-z]+}}): DW_OP_bit_piece 0x1 0x0, DW_OP_LLVM_user DW_OP_LLVM_undefined, DW_OP_bit_piece 0x1 0x0, DW_OP_regx SGPR50, DW_OP_bit_piece 0x1e 0x0
    ; CHECK-NEXT: DW_AT_name ("bits")
    DBG_VALUE renamable $sgpr49, $noreg, !19, !DIExpression(DW_OP_LLVM_poisoned, DW_OP_LLVM_fragment, 1, 1), debug-location !16
    DBG_VALUE renamable $sgpr50, $noreg, !19, !DIExpression(DIOpArg(0, i64), DIOpFragment(2, 30)), debug-location !16

    ; CHECK: DW_AT_location
    ; CHECK-NEXT: [0x{{[0-9a-z]+}}, 0x{{[0-9a-z]+}}): DW_OP_regx SGPR51, DW_OP_piece 0x4, DW_OP_LLVM_user DW_OP_LLVM_undefined, DW_OP_piece 0x4
    ; CHECK-NEXT: DW_AT_name ("struct_var")
    DBG_VALUE renamable $sgpr51, $noreg, !25, !DIExpression(DIOpArg(0, i32), DIOpFragment(0, 32)), debug-location !16
    DBG_VALUE renamable $sgpr52, $noreg, !25, !DIExpression(DW_OP_LLVM_poisoned, DW_OP_LLVM_fragment, 32, 32), debug-location !16

    S_ENDPGM 0, debug-location !16

...
